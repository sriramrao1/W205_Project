## City with most restaurants in the dataset
sqlc.sql("select city, count(*) as C from business group by city order by C desc").collect()
[Row(city=u'Las Vegas', C=4658), Row(city=u'Phoenix', C=2922), Row(city=u'Montr\xe9al', C=2291), Row(city=u'Charlotte', C=1886), Row(city=u'Pittsburgh', C=1401), Row(city=u'Edinburgh', C=1215), Row(city=u'Scottsdale', C=1177), Row(city=u'Mesa', C=870), Row(city=u'Madison', C=806), Row(city=u'Tempe', C=789), Row(city=u'Henderson', C=653), Row(city=u'Chandler', C=645), Row(city=u'Glendale', C=522), Row(city=u'Karlsruhe', C=455), Row(city=u'Gilbert', C=399), Row(city=u'Peoria', C=278), Row(city=u'North Las Vegas', C=240), Row(city=u'Champaign', C=198), Row(city=u'Waterloo', C=175), Row(city=u'Surprise', C=163), Row(city=u'Laval', C=156), Row(city=u'Kitchener', C=142), Row(city=u'Goodyear', C=136), Row(city=u'Matthews', C=136), Row(city=u'Avondale', C=129), Row(city=u'Queen Creek', C=105), Row(city=u'Fort Mill', C=105), Row(city=u'Urbana', C=99), Row(city=u'Middleton', C=83), Row(city=u'Casa Grande', C=79), Row(city=u'Concord', C=71), Row(city=u'Cave Creek', C=69), Row(city=u'Verdun', C=64), Row(city=u'Apache Junction', C=58), Row(city=u'Maricopa', C=57), Row(city=u'Sun Prairie', C=55), Row(city=u'Fountain Hills', C=54), Row(city=u'Buckeye', C=53), Row(city=u'Brossard', C=51), Row(city=u'Saint-Laurent', C=50), Row(city=u'Fitchburg', C=47), Row(city=u'Pineville', C=42), Row(city=u'Montreal', C=41), Row(city=u'Wickenburg', C=40), Row(city=u'Monona', C=39), Row(city=u'Ettlingen', C=37), Row(city=u'Anthem', C=36), Row(city=u'Sun City', C=35), Row(city=u'Litchfield Park', C=33), Row(city=u'Dollard-des-Ormeaux', C=32), Row(city=u'Pointe-Claire', C=31), Row(city=u'Belmont', C=31), Row(city=u'Lasalle', C=28), Row(city=u'Tolleson', C=27), Row(city=u'San Tan Valley', C=27), Row(city=u'Westmount', C=26), Row(city=u'Paradise Valley', C=26), Row(city=u'Laveen', C=25), Row(city=u'Dorval', C=25), Row(city=u'Dollard-Des-Ormeaux', C=25), Row(city=u'Indian Trail', C=24), Row(city=u'Verona', C=24), Row(city=u'Carnegie', C=24), Row(city=u'Homestead', C=23), Row(city=u'Carefree', C=21), Row(city=u'Outremont', C=21), Row(city=u'Longueuil', C=20), Row(city=u'Florence', C=19), Row(city=u'El Mirage', C=18), Row(city=u'West Mifflin', C=17), Row(city=u'Gold Canyon', C=17), Row(city=u'Lachine', C=17), Row(city=u'Mint Hill', C=17), Row(city=u'Pierrefonds', C=15), Row(city=u'Kirkland', C=14), Row(city=u'Waunakee', C=14), Row(city=u'Bellevue', C=14), Row(city=u'Harrisburg', C=13), Row(city=u'Saint-Leonard', C=13), Row(city=u'Rheinstetten', C=12), Row(city=u'Mount Holly', C=12), Row(city=u'Boulder City', C=11), Row(city=u'De Forest', C=11), Row(city=u'Sun City West', C=11), Row(city=u'Eggenstein-Leopoldshafen', C=11), Row(city=u'Munhall', C=9), Row(city=u'Durmersheim', C=9), Row(city=u'Gila Bend', C=9), Row(city=u'Saint-Lambert', C=9), Row(city=u'Huntersville', C=8), Row(city=u'Stallings', C=8), Row(city=u'Pfinztal', C=8), Row(city=u'Tega Cay', C=8), Row(city=u'N Las Vegas', C=8), Row(city=u'Musselburgh', C=8), Row(city=u'McKees Rocks', C=8), Row(city=u'Coolidge', C=7), Row(city=u'W\xf6rth am Rhein', C=7), Row(city=u'Paradise', C=7), Row(city=u'Mc Farland', C=7), Row(city=u'Mount Lebanon', C=7), Row(city=u'Weingarten', C=7), Row(city=u'Mont-Royal', C=7), Row(city=u'La Prairie', C=7), Row(city=u'Sun Lakes', C=6), Row(city=u'Sainte-Anne-De-Bellevue', C=6), Row(city=u'Anjou', C=6), Row(city=u'Cottage Grove', C=6), Row(city=u'Waldbronn', C=6), Row(city=u'DeForest', C=6), Row(city=u'West Homestead', C=6), Row(city=u'Youngtown', C=6), Row(city=u'Aspinwall', C=5), Row(city=u'Bridgeville', C=5), Row(city=u'Mc Kees Rocks', C=5), Row(city=u'Dalkeith', C=5), Row(city=u'Stutensee', C=5), Row(city=u'Boisbriand', C=5), Row(city=u'Karlsbad', C=5), Row(city=u'Greenfield Park', C=5), Row(city=u'Wesley Chapel', C=4), Row(city=u'Beaconsfield', C=4), Row(city=u'Lake Wylie', C=4), Row(city=u'South Queensferry', C=4), Row(city=u'Hagenbach', C=4), Row(city=u'Guadalupe', C=4), Row(city=u'Saint-Eustache', C=4), Row(city=u'Ahwatukee', C=4), Row(city=u'Tonopah', C=4), Row(city=u'New River', C=4), Row(city=u'Old Town', C=4), Row(city=u'Swissvale', C=3), Row(city=u'Fort McDowell', C=3), Row(city=u'McFarland', C=3), Row(city=u'Higley', C=3), Row(city=u'Nellis AFB', C=3), Row(city=u'Savoy', C=3), Row(city=u'Vimont', C=3), Row(city=u'Windsor', C=3), Row(city=u'Weingarten (Baden)', C=3), Row(city=u'Terrebonne', C=3), Row(city=u'New Town', C=3), Row(city=u'Spring Valley', C=3), Row(city=u'Rosem\xe8re', C=3), Row(city=u'Juniper Green', C=3), Row(city=u'St Jacobs', C=3), Row(city=u'Pointe-Aux-Trembles', C=3), Row(city=u'Indian Land', C=3), Row(city=u'Cambridge', C=3), Row(city=u'Crafton', C=3), Row(city=u'Sharpsburg', C=3), Row(city=u'Bietigheim', C=3), Row(city=u'Saint-laurent', C=2), Row(city=u'Montreal-West', C=2), Row(city=u'Blainville', C=2), Row(city=u'Saint Laurent', C=2), Row(city=u'Leith', C=2), Row(city=u'Castle Shannon', C=2), Row(city=u'Qu\xe9bec', C=2), Row(city=u'Brentwood', C=2), Row(city=u'Morristown', C=2), Row(city=u'Montr\xe9al-Nord', C=2), Row(city=u'Montreal-Nord', C=2), Row(city=u'Stoughton', C=2), Row(city=u'Las Vegas ', C=2), Row(city=u'Pheonix', C=2), Row(city=u'Fort Mcdowell', C=2), Row(city=u'Dollard-Des Ormeaux', C=2), Row(city=u'Jockgrim', C=2), Row(city=u'Cote-Saint-Luc', C=2), Row(city=u'Sainte-Th\xe9r\xe8se', C=2), Row(city=u'Neuburg am Rhein', C=2), Row(city=u'Scottdale', C=2), Row(city=u'Queensferry', C=2), Row(city=u"L'\xcele-Bizard", C=2), Row(city=u'Lasswade', C=2), Row(city=u'Dravosburg', C=2), Row(city=u'Sainte-Anne-de-Bellevue', C=2), Row(city=u'Heidelberg', C=2), Row(city=u'Mckees Rocks', C=2), Row(city=u'N. Las Vegas', C=2), Row(city=u'Clover', C=2), Row(city=u'Conestogo', C=2), Row(city=u'Rosemere', C=2), Row(city=u'Laveen Village', C=1), Row(city=u'Dane', C=1), Row(city=u'Deux-Montagnes', C=1), Row(city=u'McAdenville', C=1), Row(city=u'Pittsburgh/Waterfront', C=1), Row(city=u'Mattews', C=1), Row(city=u'Milton Bridge', C=1), Row(city=u'Mount Washington', C=1), Row(city=u'New Dundee', C=1), Row(city=u'Pittsburgh/S. Hills Galleria', C=1), Row(city=u'Oakland', C=1), Row(city=u'North Queensferry', C=1), Row(city=u'Summerlin South', C=1), Row(city=u'NELLIS AFB', C=1), Row(city=u"Baie-D'urfe", C=1), Row(city=u'St. Jacobs', C=1), Row(city=u'Saint-Henri', C=1), Row(city=u"L'\xcele-des-Soeurs", C=1), Row(city=u'Ste-Rose', C=1), Row(city=u'Dalgety Bay', C=1), Row(city=u'Mascouche', C=1), Row(city=u'Green Tree', C=1), Row(city=u'Montr\xe9al-Ouest', C=1), Row(city=u'Ft. Mill', C=1), Row(city=u'Phoenix Sky Harbor Center', C=1), Row(city=u'Mcfarland', C=1), Row(city=u'Communaut\xe9-Urbaine-de-Montr\xe9al', C=1), Row(city=u'Lawrenceville', C=1), Row(city=u'Shadyside', C=1), Row(city=u'Central City', C=1), Row(city=u'Mesa AZ', C=1), Row(city=u'Sainte-Ann-De-Bellevue', C=1), Row(city=u'Mt. Oliver Boro', C=1), Row(city=u'Golden Square Mile', C=1), Row(city=u'Nellis Afb', C=1), Row(city=u'Glasgow', C=1), Row(city=u'Central', C=1), Row(city=u'LaSalle', C=1), Row(city=u'Bellvue', C=1), Row(city=u'Green Valley', C=1), Row(city=u'Downtown', C=1), Row(city=u'Kahnawake', C=1), Row(city=u'Black Canyon City', C=1), Row(city=u'Bonnyrigg', C=1), Row(city=u'Balerno', C=1), Row(city=u'Bruchsal', C=1), Row(city=u'Queen Valley', C=1), Row(city=u'Stockbridge', C=1), Row(city=u'Saint-Hubert', C=1), Row(city=u'Dallas', C=1), Row(city=u'Newbridge', C=1), Row(city=u'Bloomfield', C=1), Row(city=u'Millvale', C=1), Row(city=u'Arcadia', C=1), Row(city=u'North Scottsdale', C=1), Row(city=u'Stutensee-Blankenloch', C=1), Row(city=u'rankin', C=1), Row(city=u'Delmont', C=1), Row(city=u'Wilkinsburg', C=1), Row(city=u'St Leonard', C=1), Row(city=u'Sainte-Therese', C=1), Row(city=u'St-Laurent', C=1), Row(city=u'Deforest', C=1), Row(city=u'Clark', C=1), Row(city=u'Fabreville', C=1), Row(city=u'Whitehall', C=1), Row(city=u'Mont\xe9al', C=1), Row(city=u'Inverkeithing', C=1), Row(city=u'Monroe', C=1), Row(city=u'Squirrel Hill', C=1), Row(city=u'Pittsburrgh', C=1), Row(city=u'Concord Mills', C=1), Row(city=u'Bonnyrigg and Lasswade', C=1), Row(city=u'Edgewood', C=1), Row(city=u'Roxboro', C=1), Row(city=u'Weddington', C=1), Row(city=u'Boucherville', C=1), Row(city=u'Tortilla Flat', C=1), Row(city=u'Allentown', C=1), Row(city=u'Arlington', C=1), Row(city=u'Sainte-Genevieve', C=1), Row(city=u'glendale', C=1), Row(city=u'Dormont', C=1), Row(city=u'South Gyle', C=1), Row(city=u'Central City Village', C=1), Row(city=u'Stowe Township', C=1), Row(city=u'Bocholt', C=1), Row(city=u'Lower Lawrenceville', C=1), Row(city=u'Tonto Basin', C=1), Row(city=u'Loanhead', C=1), Row(city=u'Enterprise', C=1), Row(city=u'Regent Square', C=1), Row(city=u'Montreal-Est', C=1), Row(city=u'South Mountain', C=1), Row(city=u'Rio Verde', C=1), Row(city=u'Rock Hill', C=1), Row(city=u'Ratho', C=1), Row(city=u'St. Agatha', C=1), Row(city=u'City of Edinburgh', C=1), Row(city=u'Maricopa AZ', C=1), Row(city=u'Sedona', C=1), Row(city=u'Saint Leonard', C=1), Row(city=u'Glendale Az', C=1)]
------

sqlc.sql("select count(*) from review where stars>2 and text like '%Hoagie%'").collect() --157
sqlc.sql("select business_id from review where stars>2 and text like '%Hoagie%'").collect()
sqlc.sql("select count(*) from review where stars>2 and text like '%Hoagie%'").collect() --157

select count(*) from review where stars>2 and text like '%Hoagie%'

select b.name from review, business where text like '%Hoagie%' AND stars>2 and review.business_id=business.business_id

sqlc.sql("select b.name from review r, business b where r.text like '%Hoagie%' AND r.stars>2 and r.business_id=b.business_id order by r.stars desc").collect()

## Cities with most reviews in the dataset
sqlc.sql("select b.city, count(*) as C from review r, business b where r.business_id=b.business_id group by city order by C desc").collect()

##Restaurant with best pizza in Las Vegas
sqlc.sql("select b.business_id, b.name, count(*) as C, avg(r.stars) as average from review r, business b where r.text like '%pizza%' AND r.stars>2 and r.business_id=b.business_id AND b.city='Las Vegas' group by b.business_id, b.name order by average, C desc limit 5").collect()
sqlc.sql("select b.business_id, b.name, count(*) as C, avg(r.stars) as average from review r, business b where r.text like '%pizza%' AND r.stars>2 and r.business_id=b.business_id AND b.city='Las Vegas' group by b.business_id, b.name order by C desc limit 5").collect()
[Row(name=u'Secret Pizza', C=1728), Row(name=u'Pizza Rock', C=722), Row(name=u"Grimaldi's Pizzeria", C=333), Row(name=u"Grimaldi's Pizzeria", C=327), Row(name=u"Biaggio's Pizzeria", C=302)]

sqlc.sql("select b.name, count(*) as C from review r, business b where r.text like '%pizza%' and r.business_id=b.business_id AND b.city='Las Vegas' group by b.business_id, b.name order by C desc limit 5").collect()

sqlc.sql("select count(*), avg(r.stars) from review r where datediff(current_date(), r.date)<365 and r.business_id='eq6lQI039SBLC6sHm3idGA' and r.text like '%pizza%'").collect()
sqlc.sql("select count(*) from review r where datediff(current_date(), r.date)< and r.business_id='eq6lQI039SBLC6sHm3idGA' r.text like '%pizza%'").collect()
sqlc.sql("select (select count(*) from review r1 where datediff(current_date, r1.date)<365) as revrecency1, (select count(*) from review r2 where datediff(current_date, r2.date)<30) as revrecency2 and r.business_id="
         
spark-submit /data/Project1/restaurantfinder.py pancake Phoenix


##Restaurant with best pancake in Phoenix
sqlc.sql("select b.name, count(*) as C from review r, business b where r.text like '%pancake%' AND r.stars>3 and r.business_id=b.business_id AND b.city='Phoenix' group by b.business_id, b.name order by C desc limit 5").collect()

rbf = sqlc.sql("select * from review r, business b where r.business_id=b.business_id").collect()


select count(*) as C from review r, business b where b.name = '' AND text



sqlc.sql("select business_id, count(*) as C from review r where r.text like '%pancake%' AND b.city='Phoenix' group by r.business_id order by C desc limit 5").collect()


-----------DOES NOT WORK---------------
f= sc.textfile
f = sqlc.read("/data/Project1/foodlist.csv")

SELECT business_id, count(*) as C, reviewc = STUFF((SELECT N', ' + rev FROM review AS r2 WHERE r2.review_id = r.review_id ORDER BY rev FOR XML PATH(N'')), 1, 2, N'') FROM review AS r GROUP BY business_id ORDER BY C desc Limit 3;

sqlc.sql("SELECT business_id, count(*) as C, reviewc = STUFF((SELECT N', ' + rev FROM review AS r2 WHERE r2.review_id = r.review_id ORDER BY rev FOR XML PATH(N'')), 1, 2, N'') FROM review AS r GROUP BY business_id ORDER BY C desc limit 3").collect()
